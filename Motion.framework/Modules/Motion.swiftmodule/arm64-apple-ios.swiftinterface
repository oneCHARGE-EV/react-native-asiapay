// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Motion
import Foundation
import MetalKit
@_exported import Motion
import ObjectiveC
import Swift
import UIKit
@_hasMissingDesignatedInitializers public class MotionContext {
  final public let container: UIKit.UIView
  public var fromViews: [UIKit.UIView]!
  public var toViews: [UIKit.UIView]!
  @objc deinit
}
extension MotionContext {
  public subscript(view: UIKit.UIView) -> Motion.MotionTargetState? {
    get
    set(value)
  }
}
extension MotionContext {
  public func sourceView(for motionIdentifier: Swift.String) -> UIKit.UIView?
  public func destinationView(for motionIdentifier: Swift.String) -> UIKit.UIView?
  public func pairedView(for view: UIKit.UIView) -> UIKit.UIView?
  @discardableResult
  public func snapshotView(for view: UIKit.UIView) -> UIKit.UIView
  public func insertGlobalViewTree(view: UIKit.UIView)
  public func clean()
}
extension MotionTransition : UIKit.UITabBarControllerDelegate {
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, animationControllerForTransitionFrom fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension CGSize {
  public var center: CoreGraphics.CGPoint {
    get
  }
  public var topLeft: CoreGraphics.CGPoint {
    get
  }
  public var topRight: CoreGraphics.CGPoint {
    get
  }
  public var bottomLeftPoint: CoreGraphics.CGPoint {
    get
  }
  public var bottomRight: CoreGraphics.CGPoint {
    get
  }
  public func transform(_ t: CoreGraphics.CGAffineTransform) -> CoreGraphics.CGSize
  public func transform(_ t: QuartzCore.CATransform3D) -> CoreGraphics.CGSize
}
extension CGRect {
  public var center: CoreGraphics.CGPoint {
    get
  }
  public var bounds: CoreGraphics.CGRect {
    get
  }
  public init(center: CoreGraphics.CGPoint, size: CoreGraphics.CGSize)
}
extension CGFloat {
  public func clamp(_ a: CoreGraphics.CGFloat, _ b: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
extension CGPoint {
  public func translate(_ dx: CoreGraphics.CGFloat, dy: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
  public func transform(_ t: CoreGraphics.CGAffineTransform) -> CoreGraphics.CGPoint
  public func transform(_ t: QuartzCore.CATransform3D) -> CoreGraphics.CGPoint
  public func distance(_ b: CoreGraphics.CGPoint) -> CoreGraphics.CGFloat
}
public func + (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func - (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func / (left: CoreGraphics.CGPoint, right: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
public func / (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func / (left: CoreGraphics.CGPoint, right: CoreGraphics.CGSize) -> CoreGraphics.CGPoint
public func / (left: CoreGraphics.CGSize, right: CoreGraphics.CGSize) -> CoreGraphics.CGSize
public func * (left: CoreGraphics.CGPoint, right: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
public func * (left: CoreGraphics.CGPoint, right: CoreGraphics.CGSize) -> CoreGraphics.CGPoint
public func * (left: CoreGraphics.CGFloat, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func * (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func * (left: CoreGraphics.CGSize, right: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
public func * (left: CoreGraphics.CGSize, right: CoreGraphics.CGSize) -> CoreGraphics.CGSize
public func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
public func != (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
prefix public func - (point: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
public func abs(_ p: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
extension MotionTransition : UIKit.UINavigationControllerDelegate {
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
public protocol MotionPreprocessor : AnyObject {
  var motion: Motion.MotionTransition! { get set }
  func process(fromViews: [UIKit.UIView], toViews: [UIKit.UIView])
}
public enum CascadeDirection {
  case topToBottom
  case bottomToTop
  case leftToRight
  case rightToLeft
  case radial(center: CoreGraphics.CGPoint)
  case inverseRadial(center: CoreGraphics.CGPoint)
}
extension CALayer {
  public func animate(_ animations: QuartzCore.CAAnimation...)
  public func animate(_ animations: [QuartzCore.CAAnimation])
  public func animate(_ animations: Motion.MotionAnimation...)
  public func animate(_ animations: [Motion.MotionAnimation], completion: (() -> Swift.Void)? = nil)
}
public enum MotionAnimationKeyPath : Swift.String {
  case backgroundColor
  case borderColor
  case borderWidth
  case cornerRadius
  case transform
  case rotate
  case rotateX
  case rotateY
  case rotateZ
  case scale
  case scaleX
  case scaleY
  case scaleZ
  case translation
  case translationX
  case translationY
  case translationZ
  case position
  case opacity
  case zPosition
  case width
  case height
  case size
  case shadowPath
  case shadowColor
  case shadowOffset
  case shadowOpacity
  case shadowRadius
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension CABasicAnimation {
  convenience public init(keyPath: Motion.MotionAnimationKeyPath)
}
public struct MotionCAAnimation {
}
extension MotionCAAnimation {
  public static func background(color: UIKit.UIColor) -> QuartzCore.CABasicAnimation
  public static func border(color: UIKit.UIColor) -> QuartzCore.CABasicAnimation
  public static func border(width: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func corner(radius: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func transform(_ t: QuartzCore.CATransform3D) -> QuartzCore.CABasicAnimation
  public static func scale(_ xyz: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func scale(x: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func scale(y: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func scale(z: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func spin(x: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func spin(y: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func spin(z: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func position(_ point: CoreGraphics.CGPoint) -> QuartzCore.CABasicAnimation
  public static func fade(_ opacity: Swift.Double) -> QuartzCore.CABasicAnimation
  public static func zPosition(_ position: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func width(_ width: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func height(_ height: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
  public static func size(_ size: CoreGraphics.CGSize) -> QuartzCore.CABasicAnimation
  public static func shadow(path: CoreGraphics.CGPath) -> QuartzCore.CABasicAnimation
  public static func shadow(color: UIKit.UIColor) -> QuartzCore.CABasicAnimation
  public static func shadow(offset: CoreGraphics.CGSize) -> QuartzCore.CABasicAnimation
  public static func shadow(opacity: Swift.Float) -> QuartzCore.CABasicAnimation
  public static func shadow(radius: CoreGraphics.CGFloat) -> QuartzCore.CABasicAnimation
}
public struct MotionTargetState {
  public var motionIdentifier: Swift.String?
  public var conditionalModifiers: [((Motion.MotionConditionalContext) -> Swift.Bool, [Motion.MotionModifier])]?
  public var position: CoreGraphics.CGPoint?
  public var size: CoreGraphics.CGSize?
  public var transform: QuartzCore.CATransform3D?
  public var opacity: Swift.Double?
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: CoreGraphics.CGColor?
  public var zPosition: CoreGraphics.CGFloat?
  public var contentsRect: CoreGraphics.CGRect?
  public var contentsScale: CoreGraphics.CGFloat?
  public var borderWidth: CoreGraphics.CGFloat?
  public var borderColor: CoreGraphics.CGColor?
  public var shadowColor: CoreGraphics.CGColor?
  public var shadowOpacity: Swift.Float?
  public var shadowOffset: CoreGraphics.CGSize?
  public var shadowRadius: CoreGraphics.CGFloat?
  public var shadowPath: CoreGraphics.CGPath?
  public var masksToBounds: Swift.Bool?
  public var displayShadow: Swift.Bool
  public var overlay: (color: CoreGraphics.CGColor, opacity: CoreGraphics.CGFloat)?
  public var spring: (CoreGraphics.CGFloat, CoreGraphics.CGFloat)?
  public var delay: Swift.Double
  public var duration: Foundation.TimeInterval?
  public var timingFunction: QuartzCore.CAMediaTimingFunction?
  public var arc: CoreGraphics.CGFloat?
  public var cascade: (Foundation.TimeInterval, Motion.CascadeDirection, Swift.Bool)?
  public var ignoreSubviewTransitions: Swift.Bool?
  public var coordinateSpace: Motion.MotionCoordinateSpace?
  public var useScaleBasedSizeChange: Swift.Bool?
  public var snapshotType: Motion.MotionSnapshotType?
  public var nonFade: Swift.Bool
  public var forceAnimate: Swift.Bool
  public var custom: [Swift.String : Any]?
}
extension MotionTargetState {
  public mutating func append(_ modifier: Motion.MotionModifier)
  public mutating func append(contentsOf modifiers: [Motion.MotionModifier])
  public subscript(key: Swift.String) -> Any? {
    get
    set(value)
  }
}
extension MotionTargetState : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Motion.MotionModifier...)
  public typealias ArrayLiteralElement = Motion.MotionModifier
}
public protocol MotionTargetStateObserver {
  func motion(transitionObserver: Motion.MotionTargetStateObserver, didUpdateWith progress: Foundation.TimeInterval)
}
public protocol MotionAnimator : AnyObject {
  var motion: Motion.MotionTransition! { get set }
  func clean()
  func canAnimate(view: UIKit.UIView, isAppearing: Swift.Bool) -> Swift.Bool
  func animate(fromViews: [UIKit.UIView], toViews: [UIKit.UIView]) -> Foundation.TimeInterval
  func seek(to progress: Foundation.TimeInterval)
  func resume(at progress: Foundation.TimeInterval, isReversed: Swift.Bool) -> Foundation.TimeInterval
  func apply(state: Motion.MotionTargetState, to view: UIKit.UIView)
}
extension CAMediaTimingFunction {
  public static let linear: QuartzCore.CAMediaTimingFunction
  public static let easeIn: QuartzCore.CAMediaTimingFunction
  public static let easeOut: QuartzCore.CAMediaTimingFunction
  public static let easeInOut: QuartzCore.CAMediaTimingFunction
  public static let standard: QuartzCore.CAMediaTimingFunction
  public static let deceleration: QuartzCore.CAMediaTimingFunction
  public static let acceleration: QuartzCore.CAMediaTimingFunction
  public static let sharp: QuartzCore.CAMediaTimingFunction
  public static let easeOutBack: QuartzCore.CAMediaTimingFunction
}
public struct MotionAnimationState {
  public var position: CoreGraphics.CGPoint?
  public var size: CoreGraphics.CGSize?
  public var transform: QuartzCore.CATransform3D?
  public var spin: (x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, z: CoreGraphics.CGFloat)?
  public var opacity: Swift.Double?
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: CoreGraphics.CGColor?
  public var zPosition: CoreGraphics.CGFloat?
  public var borderWidth: CoreGraphics.CGFloat?
  public var borderColor: CoreGraphics.CGColor?
  public var shadowColor: CoreGraphics.CGColor?
  public var shadowOpacity: Swift.Float?
  public var shadowOffset: CoreGraphics.CGSize?
  public var shadowRadius: CoreGraphics.CGFloat?
  public var shadowPath: CoreGraphics.CGPath?
  public var spring: (CoreGraphics.CGFloat, CoreGraphics.CGFloat)?
  public var delay: Swift.Double
  public var duration: Swift.Double
  public var timingFunction: QuartzCore.CAMediaTimingFunction
  public var custom: [Swift.String : Any]?
  public var completion: (() -> Swift.Void)?
}
extension MotionAnimationState {
  public mutating func append(_ element: Motion.MotionAnimation)
  public mutating func append(contentsOf elements: [Motion.MotionAnimation])
  public subscript(key: Swift.String) -> Any? {
    get
    set(value)
  }
}
extension MotionAnimationState : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Motion.MotionAnimation...)
  public typealias ArrayLiteralElement = Motion.MotionAnimation
}
@_hasMissingDesignatedInitializers public class MotionAnimation {
  @objc deinit
}
extension MotionAnimation {
  public static func background(color: UIKit.UIColor) -> Motion.MotionAnimation
  public static func border(color: UIKit.UIColor) -> Motion.MotionAnimation
  public static func border(width: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func corner(radius: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func transform(_ transform: QuartzCore.CATransform3D) -> Motion.MotionAnimation
  public static func rotate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func rotate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func rotate(_ z: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func spin(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func spin(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func spin(_ z: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func scale(x: CoreGraphics.CGFloat = 1, y: CoreGraphics.CGFloat = 1, z: CoreGraphics.CGFloat = 1) -> Motion.MotionAnimation
  public static func scale(_ xy: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func translate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func translate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> Motion.MotionAnimation
  public static func position(_ point: CoreGraphics.CGPoint) -> Motion.MotionAnimation
  public static func position(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static var fadeIn: Motion.MotionAnimation
  public static var fadeOut: Motion.MotionAnimation
  public static func fade(_ opacity: Swift.Double) -> Motion.MotionAnimation
  public static func zPosition(_ position: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func size(_ size: CoreGraphics.CGSize) -> Motion.MotionAnimation
  public static func size(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func shadow(path: CoreGraphics.CGPath) -> Motion.MotionAnimation
  public static func shadow(color: UIKit.UIColor) -> Motion.MotionAnimation
  public static func shadow(offset: CoreGraphics.CGSize) -> Motion.MotionAnimation
  public static func shadow(opacity: Swift.Float) -> Motion.MotionAnimation
  public static func shadow(radius: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func depth(offset: CoreGraphics.CGSize, opacity: Swift.Float, radius: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func depth(_ depth: (CoreGraphics.CGSize, Swift.Float, CoreGraphics.CGFloat)) -> Motion.MotionAnimation
  @available(iOS 9, *)
  public static func spring(stiffness: CoreGraphics.CGFloat, damping: CoreGraphics.CGFloat) -> Motion.MotionAnimation
  public static func duration(_ duration: Foundation.TimeInterval) -> Motion.MotionAnimation
  public static func delay(_ time: Foundation.TimeInterval) -> Motion.MotionAnimation
  public static func timingFunction(_ timingFunction: QuartzCore.CAMediaTimingFunction) -> Motion.MotionAnimation
  public static func completion(_ execute: @escaping () -> Swift.Void) -> Motion.MotionAnimation
}
extension MotionTransition {
  public func update(_ percentageComplete: Foundation.TimeInterval)
  public func finish(isAnimated: Swift.Bool = true)
  public func cancel(isAnimated: Swift.Bool = true)
  public func apply(modifiers: [Motion.MotionModifier], to view: UIKit.UIView)
}
extension UIViewController {
  public var motionTransitionType: Motion.MotionTransitionAnimationType {
    get
    set(value)
  }
  @objc @IBInspectable dynamic public var isMotionEnabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
}
extension UINavigationController {
  public var motionNavigationTransitionType: Motion.MotionTransitionAnimationType {
    get
    set(value)
  }
}
extension UITabBarController {
  public var motionTabBarTransitionType: Motion.MotionTransitionAnimationType {
    get
    set(value)
  }
}
extension UIViewController {
  @objc @IBAction dynamic public func motionDismissViewController()
  @objc @IBAction dynamic public func motionUnwindToRootViewController()
  public func motionUnwindToViewController(_ toViewController: UIKit.UIViewController)
  public func motionUnwindToViewController(withSelector: ObjectiveC.Selector)
  public func motionUnwindToViewController(withClass: Swift.AnyClass)
  public func motionUnwindToViewController(withMatchBlock: (UIKit.UIViewController) -> Swift.Bool)
  public func motionReplaceViewController(with next: UIKit.UIViewController)
}
public enum MotionSnapshotType {
  case optimized
  case normal
  case layerRender
  case noSnapshot
  public static func == (a: Motion.MotionSnapshotType, b: Motion.MotionSnapshotType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(MotionViewOrderStrategy) public enum MotionViewOrderStrategy : Swift.Int {
  case auto
  case sourceViewOnTop
  case destinationViewOnTop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MotionViewControllerDelegate) public protocol MotionViewControllerDelegate {
  @objc optional func motionWillStartTransition(motion: Motion.MotionTransition)
  @objc optional func motionDidEndTransition(motion: Motion.MotionTransition)
  @objc optional func motionDidCancelTransition(motion: Motion.MotionTransition)
  @objc optional func motion(motion: Motion.MotionTransition, willStartTransitionFrom viewController: UIKit.UIViewController)
  @objc optional func motion(motion: Motion.MotionTransition, didEndTransitionFrom viewController: UIKit.UIViewController)
  @objc optional func motion(motion: Motion.MotionTransition, didCancelTransitionFrom viewController: UIKit.UIViewController)
  @objc optional func motion(motion: Motion.MotionTransition, willStartTransitionTo viewController: UIKit.UIViewController)
  @objc optional func motion(motion: Motion.MotionTransition, didEndTransitionTo viewController: UIKit.UIViewController)
  @objc optional func motion(motion: Motion.MotionTransition, didCancelTransitionTo viewController: UIKit.UIViewController)
}
public typealias MotionCancelBlock = (Swift.Bool) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class Motion : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Motion {
  public class func async(_ execute: @escaping () -> Swift.Void)
  @discardableResult
  public class func delay(_ time: Foundation.TimeInterval, execute: @escaping () -> Swift.Void) -> Motion.MotionCancelBlock?
  public class func cancel(delayed completion: (Swift.Bool) -> Swift.Void)
  public class func disable(_ animations: (() -> Swift.Void))
  public class func animate(duration: CoreFoundation.CFTimeInterval, timingFunction: QuartzCore.CAMediaTimingFunction = .easeInOut, animations: (() -> Swift.Void), completion: (() -> Swift.Void)? = nil)
  public class func animate(group animations: [QuartzCore.CAAnimation], timingFunction: QuartzCore.CAMediaTimingFunction = .easeInOut, duration: CoreFoundation.CFTimeInterval = 0.5) -> QuartzCore.CAAnimationGroup
}
public enum MotionTransitionState : Swift.Int {
  case possible
  case notified
  case starting
  case animating
  case completing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MotionTransition : ObjectiveC.NSObject {
  public static let shared: Motion.MotionTransition
  public var isUserInteractionEnabled: Swift.Bool
  public var viewOrderStrategy: Motion.MotionViewOrderStrategy
  public var state: Motion.MotionTransitionState {
    get
  }
  public var isTransitioning: Swift.Bool {
    get
  }
  public var isPresenting: Swift.Bool {
    get
  }
  public var isModalTransition: Swift.Bool {
    get
  }
  public var isInteractive: Swift.Bool {
    get
  }
  public var container: UIKit.UIView! {
    get
  }
  public var fromViewController: UIKit.UIViewController? {
    get
  }
  public var toViewController: UIKit.UIViewController? {
    get
  }
  public var context: Motion.MotionContext! {
    get
  }
  public var totalDuration: Swift.Double {
    get
  }
  public var progress: Swift.Double {
    get
  }
  @objc override dynamic open func forwardingTarget(for aSelector: ObjectiveC.Selector!) -> Any?
  @objc override dynamic open func responds(to aSelector: ObjectiveC.Selector!) -> Swift.Bool
  @objc deinit
}
extension MotionTransition {
  public func disableDefaultAnimationForNextTransition()
  public func setAnimationForNextTransition(_ animation: Motion.MotionTransitionAnimationType)
  public func setContainerBackgroundColorForNextTransition(_ color: UIKit.UIColor)
  public func setCompletionCallbackForNextTransition(_ completion: ((Swift.Bool) -> Swift.Void)?)
}
extension MotionTransition : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc dynamic public func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
extension MotionTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @objc dynamic public func animateTransition(using context: UIKit.UIViewControllerContextTransitioning)
  @objc dynamic public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc dynamic public func animationEnded(_ transitionCompleted: Swift.Bool)
}
extension MotionTransition : UIKit.UIViewControllerInteractiveTransitioning {
  @objc dynamic public var wantsInteractiveStart: Swift.Bool {
    @objc get
  }
  @objc dynamic public func startInteractiveTransition(_ transitionContext: UIKit.UIViewControllerContextTransitioning)
}
extension UIView {
  public var motionViewTransition: Motion.MotionViewTransition {
    get
  }
}
@_hasMissingDesignatedInitializers open class MotionViewTransition {
  open var totalDuration: Swift.Double {
    get
  }
  open var progress: CoreGraphics.CGFloat {
    get
  }
  open var shouldUpdateModels: Swift.Bool
  open func start()
  open func update(_ progress: CoreGraphics.CGFloat)
  open func cancel(isAnimated: Swift.Bool = true)
  open func finish(isAnimated: Swift.Bool = true)
  @objc deinit
}
extension MotionTransition {
  public func transition(from: UIKit.UIViewController, to: UIKit.UIViewController, in view: UIKit.UIView, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public struct MotionConditionalContext {
  weak public var view: UIKit.UIView!
  public var isAppearing: Swift.Bool {
    get
  }
  public var isPresenting: Swift.Bool {
    get
  }
  public var isTabBarController: Swift.Bool {
    get
  }
  public var isNavigationController: Swift.Bool {
    get
  }
  public var isMatched: Swift.Bool {
    get
  }
  public var isAncestorViewMatched: Swift.Bool {
    get
  }
  public var matchedView: UIKit.UIView? {
    get
  }
  public var matchedAncestorView: (UIKit.UIView, UIKit.UIView)? {
    get
  }
  public var fromViewController: UIKit.UIViewController {
    get
  }
  public var toViewController: UIKit.UIViewController {
    get
  }
  public var currentViewController: UIKit.UIViewController {
    get
  }
  public var otherViewController: UIKit.UIViewController {
    get
  }
}
public enum MotionCoordinateSpace {
  case global
  case local
  public static func == (a: Motion.MotionCoordinateSpace, b: Motion.MotionCoordinateSpace) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MotionTransitionAnimationType {
  public enum Direction {
    case left
    case right
    case up
    case down
    public static func == (a: Motion.MotionTransitionAnimationType.Direction, b: Motion.MotionTransitionAnimationType.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case none
  case auto
  case push(direction: Motion.MotionTransitionAnimationType.Direction)
  case pull(direction: Motion.MotionTransitionAnimationType.Direction)
  case cover(direction: Motion.MotionTransitionAnimationType.Direction)
  case uncover(direction: Motion.MotionTransitionAnimationType.Direction)
  case slide(direction: Motion.MotionTransitionAnimationType.Direction)
  case zoomSlide(direction: Motion.MotionTransitionAnimationType.Direction)
  case pageIn(direction: Motion.MotionTransitionAnimationType.Direction)
  case pageOut(direction: Motion.MotionTransitionAnimationType.Direction)
  case fade
  case zoom
  case zoomOut
  indirect case selectBy(presenting: Motion.MotionTransitionAnimationType, dismissing: Motion.MotionTransitionAnimationType)
  public static func autoReverse(presenting: Motion.MotionTransitionAnimationType) -> Motion.MotionTransitionAnimationType
}
final public class MotionModifier {
  public init(applyFunction: @escaping (inout Motion.MotionTargetState) -> Swift.Void)
  @objc deinit
}
extension MotionModifier {
  public static func source(_ motionIdentifier: Swift.String) -> Motion.MotionModifier
  public static func masksToBounds(_ masksToBounds: Swift.Bool) -> Motion.MotionModifier
  public static func background(color: UIKit.UIColor) -> Motion.MotionModifier
  public static func border(color: UIKit.UIColor) -> Motion.MotionModifier
  public static func border(width: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func corner(radius: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func transform(_ transform: QuartzCore.CATransform3D) -> Motion.MotionModifier
  public static func perspective(_ perspective: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func rotate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> Motion.MotionModifier
  public static func rotate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> Motion.MotionModifier
  public static func rotate(_ z: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func scale(x: CoreGraphics.CGFloat = 1, y: CoreGraphics.CGFloat = 1, z: CoreGraphics.CGFloat = 1) -> Motion.MotionModifier
  public static func scale(_ xy: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func translate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> Motion.MotionModifier
  public static func translate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> Motion.MotionModifier
  public static func position(_ point: CoreGraphics.CGPoint) -> Motion.MotionModifier
  public static func position(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static var forceNonFade: Motion.MotionModifier
  public static var fadeIn: Motion.MotionModifier
  public static var fadeOut: Motion.MotionModifier
  public static func fade(_ opacity: Swift.Double) -> Motion.MotionModifier
  public static func opacity(_ opacity: Swift.Double) -> Motion.MotionModifier
  public static func zPosition(_ position: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func size(_ size: CoreGraphics.CGSize) -> Motion.MotionModifier
  public static func size(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func shadow(path: CoreGraphics.CGPath) -> Motion.MotionModifier
  public static func shadow(color: UIKit.UIColor) -> Motion.MotionModifier
  public static func shadow(offset: CoreGraphics.CGSize) -> Motion.MotionModifier
  public static func shadow(opacity: Swift.Float) -> Motion.MotionModifier
  public static func shadow(radius: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func contents(rect: CoreGraphics.CGRect) -> Motion.MotionModifier
  public static func contents(scale: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func duration(_ duration: Foundation.TimeInterval) -> Motion.MotionModifier
  public static var durationMatchLongest: Motion.MotionModifier
  public static func delay(_ time: Foundation.TimeInterval) -> Motion.MotionModifier
  public static func timingFunction(_ timingFunction: QuartzCore.CAMediaTimingFunction) -> Motion.MotionModifier
  @available(iOS 9, *)
  public static func spring(stiffness: CoreGraphics.CGFloat, damping: CoreGraphics.CGFloat) -> Motion.MotionModifier
  public static func arc(intensity: CoreGraphics.CGFloat = 1) -> Motion.MotionModifier
  public static func cascade(delta: Foundation.TimeInterval = 0.02, direction: Motion.CascadeDirection = .topToBottom, animationDelayedUntilMatchedViews: Swift.Bool = false) -> Motion.MotionModifier
  public static func overlay(color: UIKit.UIColor, opacity: CoreGraphics.CGFloat) -> Motion.MotionModifier
}
extension MotionModifier {
  public static func when(_ condition: @escaping (Motion.MotionConditionalContext) -> Swift.Bool, _ modifiers: [Motion.MotionModifier]) -> Motion.MotionModifier
  public static func when(_ condition: @escaping (Motion.MotionConditionalContext) -> Swift.Bool, _ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static func whenMatched(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static func whenPresenting(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static func whenDismissing(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static func whenAppearing(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static func whenDisappearing(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
}
extension MotionModifier {
  public static func beginWith(_ modifiers: [Motion.MotionModifier]) -> Motion.MotionModifier
  public static func beginWith(modifiers: [Motion.MotionModifier]) -> Motion.MotionModifier
  public static func beginWith(_ modifiers: Motion.MotionModifier...) -> Motion.MotionModifier
  public static var useGlobalCoordinateSpace: Motion.MotionModifier
  public static var ignoreSubviewTransitions: Motion.MotionModifier
  public static func ignoreSubviewTransitions(recursive: Swift.Bool = false) -> Motion.MotionModifier
  public static var useOptimizedSnapshot: Motion.MotionModifier
  public static var useNormalSnapshot: Motion.MotionModifier
  public static var useLayerRenderSnapshot: Motion.MotionModifier
  public static var useNoSnapshot: Motion.MotionModifier
  public static var forceAnimate: Motion.MotionModifier
  public static var useScaleBasedSizeChange: Motion.MotionModifier
}
public struct AssociatedObject {
  public static func get<T>(base: Any, key: Swift.UnsafePointer<Swift.UInt8>, initializer: () -> T) -> T
  public static func set<T>(base: Any, key: Swift.UnsafePointer<Swift.UInt8>, value: T)
}
extension UIView {
  @objc @IBInspectable dynamic public var isMotionEnabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic public var isMotionEnabledForSubviews: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic public var motionIdentifier: Swift.String? {
    @objc get
    @objc set(value)
  }
  public func animate(_ animations: QuartzCore.CAAnimation...)
  public func animate(_ animations: [QuartzCore.CAAnimation])
  public func animate(_ animations: Motion.MotionAnimation...)
  public func animate(_ animations: [Motion.MotionAnimation], completion: (() -> Swift.Void)? = nil)
  public func transition(_ modifiers: Motion.MotionModifier...)
  public func transition(_ modifiers: [Motion.MotionModifier])
}
extension Motion.MotionAnimationKeyPath : Swift.Equatable {}
extension Motion.MotionAnimationKeyPath : Swift.Hashable {}
extension Motion.MotionAnimationKeyPath : Swift.RawRepresentable {}
extension Motion.MotionSnapshotType : Swift.Equatable {}
extension Motion.MotionSnapshotType : Swift.Hashable {}
extension Motion.MotionViewOrderStrategy : Swift.Equatable {}
extension Motion.MotionViewOrderStrategy : Swift.Hashable {}
extension Motion.MotionViewOrderStrategy : Swift.RawRepresentable {}
extension Motion.MotionTransitionState : Swift.Equatable {}
extension Motion.MotionTransitionState : Swift.Hashable {}
extension Motion.MotionTransitionState : Swift.RawRepresentable {}
extension Motion.MotionCoordinateSpace : Swift.Equatable {}
extension Motion.MotionCoordinateSpace : Swift.Hashable {}
extension Motion.MotionTransitionAnimationType.Direction : Swift.Equatable {}
extension Motion.MotionTransitionAnimationType.Direction : Swift.Hashable {}
